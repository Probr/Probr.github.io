"use strict";angular.module("probrSiteApp",["ngCookies","ngResource","ngSanitize","btford.socket-io","ui.router","ui.bootstrap","hc.marked"]).config(["$stateProvider","$urlRouterProvider","$locationProvider",function(a,b,c){b.otherwise("overview"),c.html5Mode(!1)}]),angular.module("probrSiteApp").controller("DocumentationCtrl",["$scope","$http",function(a,b){}]).controller("DocumentationCoreCtrl",["$scope","$http",function(a,b){b.get("assets/readme/core.md").success(function(b){a.probrMarkdown=b}).error(function(){})}]).controller("DocumentationAnalysisCtrl",["$scope","$http",function(a,b){b.get("assets/readme/analysis.md").success(function(b){a.probrMarkdown=b}).error(function(){})}]),angular.module("probrSiteApp").config(["$stateProvider",function(a){a.state("docs",{url:"/docs",templateUrl:"app/documentation/documentation.html",controller:"DocumentationCtrl"}).state("docs-core",{url:"/docs/core",templateUrl:"app/documentation/documentation-core.html",controller:"DocumentationCoreCtrl"}).state("docs-analysis",{url:"/docs/analysis",templateUrl:"app/documentation/documentation-analysis.html",controller:"DocumentationAnalysisCtrl"})}]),angular.module("probrSiteApp").controller("FaqCtrl",["$scope",function(a){a.message="Hello"}]),angular.module("probrSiteApp").config(["$stateProvider",function(a){a.state("faq",{url:"/faq",templateUrl:"app/faq/faq.html",controller:"FaqCtrl"})}]),angular.module("probrSiteApp").controller("InstallationCtrl",["$scope",function(a){}]).controller("InstallationCoreCtrl",["$scope",function(a){a.installation="docker"}]).controller("InstallationAnalysisCtrl",["$scope",function(a){a.installation="docker"}]),angular.module("probrSiteApp").config(["$stateProvider",function(a){a.state("installation",{url:"/installation",templateUrl:"app/installation/installation.html",controller:"InstallationCtrl"}).state("installation-core",{url:"/installation/core",templateUrl:"app/installation/installation-core.html",controller:"InstallationCoreCtrl"}).state("installation-analysis",{url:"/installation/analysis",templateUrl:"app/installation/installation-analysis.html",controller:"InstallationAnalysisCtrl"})}]),angular.module("probrSiteApp").controller("OverviewCtrl",["$scope",function(a){}]),angular.module("probrSiteApp").config(["$stateProvider",function(a){a.state("overview",{url:"/overview",templateUrl:"app/overview/overview.html",controller:"OverviewCtrl"})}]),angular.module("probrSiteApp").controller("UsageCtrl",["$scope",function(a){}]).controller("UsageCoreCtrl",["$scope",function(a){a.installation="docker"}]).controller("UsageAnalysisCtrl",["$scope",function(a){a.installation="docker"}]),angular.module("probrSiteApp").config(["$stateProvider",function(a){a.state("usage",{url:"/usage",templateUrl:"app/usage/usage.html",controller:"UsageCtrl"}).state("usage-core",{url:"/usage/core",templateUrl:"app/usage/usage-core.html",controller:"UsageCoreCtrl"}).state("usage-analysis",{url:"/usage/analysis",templateUrl:"app/usage/usage-analysis.html",controller:"UsageAnalysisCtrl"})}]),angular.module("probrSiteApp").controller("UsecaseCtrl",["$scope",function(a){}]),angular.module("probrSiteApp").config(["$stateProvider",function(a){a.state("usecase",{url:"/usecase",templateUrl:"app/usecase/usecase.html",controller:"UsecaseCtrl"})}]),angular.module("probrSiteApp").directive("footer",function(){return{templateUrl:"components/footer/footer.html",restrict:"E",link:function(a,b){b.addClass("footer")}}}),angular.module("probrSiteApp").factory("Modal",["$rootScope","$modal",function(a,b){function c(c,d){var e=a.$new();return c=c||{},d=d||"modal-default",angular.extend(e,c),b.open({templateUrl:"components/modal/modal.html",windowClass:d,scope:e})}return{confirm:{"delete":function(a){return a=a||angular.noop,function(){var b,d=Array.prototype.slice.call(arguments),e=d.shift();b=c({modal:{dismissable:!0,title:"Confirm Delete",html:"<p>Are you sure you want to delete <strong>"+e+"</strong> ?</p>",buttons:[{classes:"btn-danger",text:"Delete",click:function(a){b.close(a)}},{classes:"btn-default",text:"Cancel",click:function(a){b.dismiss(a)}}]}},"modal-danger"),b.result.then(function(b){a.apply(b,d)})}}}}}]),angular.module("probrSiteApp").controller("NavbarCtrl",["$scope","$location",function(a,b){a.isArray=angular.isArray,a.menu=[{title:"Getting Started",link:[{name:"probr-core",link:"installation-core"},{name:"probr-analysis",link:"installation-analysis"}]},{title:"Documentation",link:[{name:"probr-core",link:"docs-core"},{name:"probr-analysis",link:"docs-analysis"}]},{title:"Usage",link:[{name:"probr-core",link:"usage-core"},{name:"probr-analysis",link:"usage-analysis"}]},{title:"FAQ",link:"faq"},{title:"Usecase",link:"usecase"}],a.isCollapsed=!0,a.isActive=function(a){return a===b.path()},a.isActiveRoot=function(a){if(angular.isArray(a))return!1;a=a.toLowerCase();var c=b.path().split("/")[1];return a.slice(0,c.length)==c}}]),angular.module("probrSiteApp").directive("navbar",function(){return{templateUrl:"components/navbar/navbar.html",restrict:"E",controller:"NavbarCtrl"}}),angular.module("probrSiteApp").directive("particles",["$window",function(a){return{restrict:"A",link:function(b,c,d,e){a.particlesJS(d.id,{particles:{number:{value:40,density:{enable:!0,value_area:450}},color:{value:"#ffffff"},shape:{type:"circle",stroke:{width:0,color:"#000000"},polygon:{nb_sides:5}},opacity:{value:.5,random:!1,anim:{enable:!1,speed:1,opacity_min:.1,sync:!1}},size:{value:3,random:!0,anim:{enable:!1,speed:40,size_min:.1,sync:!1}},line_linked:{enable:!0,distance:150,color:"#ffffff",opacity:.4,width:1},move:{enable:!0,speed:.5,direction:"none",random:!1,straight:!1,out_mode:"out",bounce:!1,attract:{enable:!1,rotateX:600,rotateY:1200}}},interactivity:{detect_on:"canvas",events:{onhover:{enable:!1,mode:"bubble"},onclick:{enable:!0,mode:"push"},resize:!0},modes:{grab:{distance:400,line_linked:{opacity:1}},bubble:{distance:400,size:40,duration:2,opacity:8,speed:3},repulse:{distance:200,duration:.4},push:{particles_nb:4},remove:{particles_nb:2}}},retina_detect:!0})}}}]),angular.module("probrSiteApp").factory("socket",["socketFactory",function(a){var b=io("",{path:"/socket.io-client"}),c=a({ioSocket:b});return{socket:c,syncUpdates:function(a,b,d){d=d||angular.noop,c.on(a+":save",function(a){var c=_.find(b,{_id:a._id}),e=b.indexOf(c),f="created";c?(b.splice(e,1,a),f="updated"):b.push(a),d(f,a,b)}),c.on(a+":remove",function(a){var c="deleted";_.remove(b,{_id:a._id}),d(c,a,b)})},unsyncUpdates:function(a){c.removeAllListeners(a+":save"),c.removeAllListeners(a+":remove")}}}]),angular.module("probrSiteApp").run(["$templateCache",function(a){a.put("app/documentation/documentation-analysis.html",'<navbar></navbar><div class=row><div class="container content"><div class=row><div class="col-lg-3 side-nav-col"><h1>Index</h1><ul class="class=" nav navbar-nav side-nav><li><a href=/#/docs/core#architecture>Architecture</a></li><li><a href=/#/docs/core#frontend>Front-End</a></li><li><a href=/#/docs/core#rest>REST API</a></li><li><a href=/#/docs/core#workers>Workers</a></li><ul><li><a href=/#/docs/core#sessions-worker>Sessions worker</a></li><li><a href=/#/docs/core#locations-worker>Locations worker</a></li><li><a href=/#/docs/core#devices-worker>Devices worker</a></li></ul><li><a href=/#/docs/core#usage>Usage</a></li><ul><!--<li><a href="/#/docs/core#wizard">Add device</a></li>--><!--<li><a href="/#/docs/core#command-execution">Command execution</a></li>--><!--<li><a href="/#/docs/core#multi-command-execution">Multi-Command execution</a></li>--><!--<li><a href="/#/docs/core#upload-capture">Upload capture</a></li>--></ul></ul></div><div class=col-lg-9><div class=row><h1>probr-analysis</h1><h2><a name=architecture>Architecture</a></h2></div><br><div class=row><h2><a name=frontend>Front-end</a></h2></div><br><div class=row><h2><a name=rest>REST API</a></h2></div><br><div class=row><h2><a name=workers>Async workers</a></h2><h3><a name=sessions-worker>Session worker</a></h3><h3><a name=locations-worker>Location worker</a></h3><h3><a name=devices-worker>Device worker</a></h3></div><div class=row><h2><a name=usage>Usage samples</a></h2><h3></h3></div></div></div></div></div><footer></footer>'),a.put("app/documentation/documentation-core.html",'<navbar></navbar><div class=row><div class="container content"><div class=row><div class="col-lg-3 side-nav-col"><h1>Index</h1><ul class="class=" nav navbar-nav side-nav><li><a href=/#/docs/core#architecture>Architecture</a></li><li><a href=/#/docs/core#frontend>Front-End</a></li><li><a href=/#/docs/core#rest>REST API</a></li><ul><li><a href=/#/docs/core#rest-frontend>Frontend API</a></li><li><a href=/#/docs/core#rest-device>Devices API</a></li></ul><li><a href=/#/docs/core#authentication>Authentication</a></li><li><a href=/#/docs/core#remote-execution>Remote execution</a></li><li><a href=/#/docs/core#handlers>Custom handlers</a></li><li><a href=/#/docs/core#usage>Usage</a></li><ul><li><a href=/#/docs/core#add-device>Add device</a></li><li><a href=/#/docs/core#upload-capture>Upload capture</a></li></ul></ul></div><div class=col-lg-9><div class=row><h1>Documentation: probr-core</h1><h2><a name=architecture>Architecture</a></h2>The image below shows the architecture of probr-core. Also, the used technologies are indicated in the respective components.<div class=col-lg-12><br><br><br><img class="img-responsive center-block" src=assets/images/core.8ace830b.png width=700 height=440><br><br><br></div>probr-core is built mainly in Python as a Django web application. It serves a frontend for the user written in HTML 5 and AngularJS. Through the front end interface, the user can set up sniffing devices, enter sniffing commands, upload existing pcap files containing packets and manage or check the status of the attached sniffing devices. The probr-core Django application uses a PostgreSQL database internally as a backend to store and manage the different sniffing devices, commands, statuses and uploads.<br>The Django back-end component provides the REST API endpoints for the front end, and more importantly, also provides the REST API endpoints for the sniffing devices. Through those API endpoints the devices receive their commands to execute (e.g. start sniffing, start uploading packets, or any other unix command) and also report status data such as CPU and memory on a regular basis. The sniffing devices upload the sniffed data in pcap files to the capture endpoint on the Django back-end. There, the system takes the pcap files and gives them to the Celery worker handlers which entpack the pcap file into an appropriate structure for the respective storage. Out of the box, probr-core has built-in handlers for MongoDB and InfluxDB, but it is designed to be easily extensible. Instructions on how to write handlers for the data storage systems of your choosing can be found <a href=#/faq>here</a>.<br></div><br><div class=row><h2><a name=frontend>Front-end</a></h2>The web frontend is the main component in contact with the user. It is written entirely in HTML5 and JavaScript (with Angular). It provides the following views:<ul><li>Devices view:</li><ul style="list-style-type: none"><li><pre style="display: inline-block"><code>/web/devices</code></pre></li><li>Lets the user add new devices through the device wizard.</li><li>Lets the user see all registered devices and their status.</li><li>Lets the user open the device detail view of a device.</li><li>Allows deletion devices from the probr system.</li><li>Allows bulk-execution of a command on multiple devices at once</li></ul><br><li>Device detail view:</li><ul style="list-style-type: none"><li><pre style="display: inline-block"><code>/web/device/{device-uuid}</code></pre></li><li>Lets the user to execute commands in the web terminal of a device</li><li>Allows to start sniffing and upload packets from predefined command templates</li><li>Allows to update the device client code for probr.</li></ul><br><li>Captures view</li><ul style="list-style-type: none"><li><pre style="display: inline-block"><code>/web/captures</code></pre></li><li>Allows to see the uploaded pcap files and download them</li><li>The user can upload pcap files by hand to integrate into the system.</li></ul><br></ul></div><br><div class=row><h2><a name=rest>REST API</a></h2>The diagram below shows the endpoints of the REST API available in probr-core:<br><div class=col-lg-12><br><br><img style="img-responsive center-block" src=assets/images/rest_core.06fcb7f7.png width=1200 height="300"><br><br></div><h3><a name=rest-frontend>API endpoints frontend</a></h3>The endpoints starting with api/ are accessed by the probr-core web frontend. Those can only be accessed with a valid JSON WebToken (JWT). The JWT authentication is integrated with the Django user administration. For more info, check out the respective <a href="http://getblimp.github.io/django-rest-framework-jwt/">pip module</a>.<br><ul><li>Devices:</li><ul style="list-style-type: none"><li><pre style="display: inline-block"><code>/api/device <br>GET: JSON list of devices [{device1},{device2},{device3}...] <br>POST: Create new device; PAYLOAD: JSON device object </code></pre></li></ul><br><li>Device details:</li><ul style="list-style-type: none"><li><pre style="display: inline-block"><code>/api/device/{device-uuid} <br>GET: device details in JSON <br>POST: Alter device details; PAYLOAD: JSON device object <br>DELETE: Delete device</code></pre></li></ul><br><li>Statuses:</li><ul style="list-style-type: none"><li><pre style="display: inline-block"><code>/api/statuses <br>GET: return JSON list of statuses </code></pre></li></ul><br><li>Commands:</li><ul style="list-style-type: none"><li><pre style="display: inline-block"><code>/api/commands <br>GET: return JSON list of commands <br>POST: Create new command; PAYLOAD: command JSON object</code></pre></li></ul><br><li>Command details:</li><ul style="list-style-type: none"><li><pre style="display: inline-block"><code>/api/commands/{uuid} <br>GET: return JSON representation of command object <br>POST: update command result and status; PAYLOAD: JSON representation of command with new values</code></pre></li></ul><br><li>Commandtemplates:</li><ul style="list-style-type: none"><li><pre style="display: inline-block"><code>/api/commandtemplates <br>GET: return JSON list of commandtemplates <br>POST: create new command template; PAYLOAD: JSON representation of commandtemplate object </code></pre></li></ul><br><li>Commandtemplate details:</li><ul style="list-style-type: none"><li><pre style="display: inline-block"><code>/api/commandtemplates <br>GET: return JSON representation of commandtemplate object <br>POST: update commandtemplate parameters; PAYLOAD: PAYLOAD: JSON representation of commandtemplate with new values</code></pre></li></ul><br></ul><h3><a name=rest-devices>API endpoints devices</a></h3>The API endpoints starting with api-device/ are the ones that are accessed solely by the sniffing devices. Those can only be accessed with a valid api-key. A sniffing device receives an api-key on set-up through the device wizard in the web frontend. Setting up a device is only possible if the user is logged in via Django user administration/JWTAuth. The api-key also identifies the device that sends the requests.<br><br><h3>API endpoints devices</h3><ul><li>Captures:</li><ul style="list-style-type: none"><li><pre style="display: inline-block"><code>/api-device/captures <br>POST: Upload capture together with pcap file </code></pre></li></ul><br><li>Statuses:</li><ul style="list-style-type: none"><li><pre style="display: inline-block"><code>/api-device/statuses <br>GET: return JSON list of statuses <br>POST: create new status; PAYLOAD: JSON representation of status object</code></pre></li></ul><br><li>Commands:</li><ul style="list-style-type: none"><li><pre style="display: inline-block"><code>/api-device/commands <br>GET: return JSON list of commands <br>POST: create new command; PAYLOAD: JSON representation of command object</code></pre></li></ul><br><li>Command details:</li><ul style="list-style-type: none"><li><pre style="display: inline-block"><code>/api-device/commands/{command-uuid} <br>GET: command details in JSON <br>POST: Alter command details; PAYLOAD: JSON command object </code></pre></li></ul><br></ul></div><div class=row><h2><a name=authentication>Authentication</a></h2></div><div class=row><h2><a name=remote-execution>Remote command execution</a></h2></div><div class=row><h2><a name=handlers>Writing custom handlers</a></h2></div><div class=row><h2><a name=usage>Usage samples</a></h2><h3><a name=add-device>Adding a sniffing device</a></h3>The gif below shows how you can use the device wizard to add a sniffing device. The terminal on the right is a ssh connection to the device which shall be set up.<br><br><img src=assets/images/gifs/add_device_wizard.871a3050.gif alt="Adding a device." style="display:block; margin:auto" width=800 height="400"><h3><a name=upload-capture>Upload capture by hand</a></h3><br><br><img src=assets/images/gifs/upload_pcap.09aeb29d.gif alt="Uploading a pcap by hand." style="display:block; margin:auto" width=800 height="400"></div></div></div></div></div><footer></footer>'),a.put("app/documentation/documentation.html",'<navbar></navbar><div class="container content"><h1>Documentation</h1><div class=row><div class=col-lg-6><h2><a ui-sref=docs-core>probr-core</a></h2></div><div class=col-lg-6><h2><a ui-sref=docs-analysis>probr-analysis</a></h2></div></div></div><footer></footer>'),a.put("app/faq/faq.html",'<navbar></navbar><div class="container content"><h1>Frequently Asked Questions</h1><div class=row><div class=col-lg-12><h2>Which devices are supported?</h2><p>Probr was designed to support every device with a *NIX (Linux, Mac OS, UNIX) operating system, a wireless interface capable of monitor mode and internet access. The system was tested with:</p><ul><li><a href=http://www.hardkernel.com/main/products/prdt_info.php>ODROID C1</a> with Ubuntu</li><li><a href="https://www.raspberrypi.org/products/model-b/">Raspberry Pi B</a> with Raspbian</li><li><a href="http://www.tp-link.com/at/products/details/?model=TL-MR3020">TP-Link TL-MR3020</a> with OpenWRT</li><li>Mac OS X</li><li>Ubuntu 14.04</li></ul><p>But Probr is not limited to these devices. Any device satisfying the requirements can be used:</p><ul><li>bash shell</li><li>wget</li><li>tcpdump</li></ul></div></div><div class=row><div class=col-lg-12><h2>Which databases are supported?</h2><p>Out-of-the box, Probr supports the following databases for storage of sniffed packets:</p><ul><li><a href="https://www.mongodb.org/">MongoDB</a></li><li><a href="https://influxdb.com/">InfluxDB</a></li></ul><p>If you want to use any other database for your use case, you can extend Probr easily to do so, just by adding a handler. You can take the handlers for the existing databases as an example (<a href=https://github.com/probr/probr-core/blob/master/handlers/handlers.py>here</a> ). Then, you need to add your handler into the config variable "PROBR_HANDLERS" in <a href=https://github.com/probr/probr-core/blob/master/probr/base_settings.py>here</a>.</p></div></div><div class=row><div class=col-lg-12><h2>Do I need to know how the WiFi protocol works, or how to write sniffing scripts?</h2><p>No! That\'s the beauty of it. Probr comes with predefined command templates for sniffing WiFi probe requests and uploading them to Probr\'s database, from where you can use the packets to do any analysis you want on them.</p></div></div></div><footer></footer>'),a.put("app/installation/installation-analysis.html",'<navbar></navbar><div class="container content"><h1>Probr-Analysis: Installation</h1><div class=row><div class="col-xs-6 install-block"><a ng-click="installation = \'docker\'"><i class="icon-install icon-docker" ng-class="{ \'icon-active\': installation === \'docker\' }"></i></a></div><div class="col-xs-6 install-block" ng-click="installation == \'python\'"><a ng-click="installation = \'nodejs\'"><i class="icon-install icon-nodejs" ng-class="{ \'icon-active\': installation === \'nodejs\' }"></i></a></div></div><div class=row ng-show="installation ===\'docker\'"><marked>TODO</marked></div><div class=row ng-show="installation ===\'nodejs\'"><h3><a id=user-content-technology class=anchor href=#technology aria-hidden=true><span class="octicon octicon-link"></span></a>Technology</h3><p>To build and run the application you will need:</p><ul><li><a href="https://nodejs.org/en/">NodeJS version 0.10</a></li><li><a href="https://www.npmjs.com/">NPM</a></li><li><a href="http://bower.io/">Bower</a></li><li><a href="https://www.mongodb.org/">MongoDB</a></li><li><a href="http://redis.io/">Redis</a></li></ul><p>Also, to have the best user experience, including live modes and analysis, you should have a running set-up of probr-core, as described <a href=https://github.com/probr/probr-core>here</a>.</p><h2><a id=user-content-getting-started class=anchor href=#getting-started aria-hidden=true><span class="octicon octicon-link"></span></a>Getting started</h2><p>Make sure probr-core runs and collects data.</p><p>Make sure your mongo deamon runs:</p><pre><code>mongod &amp;\n    </code></pre><p>Also, start your redis server:</p><pre><code>redis-server &amp;\n    </code></pre><p>After cloning the repo and going into the <code>probr-analysis</code> directory:</p><pre><code>npm install\n    </code></pre><p>After the installation of the npm dependencies has finished, install the bower dependencies:</p><pre><code>bower install\n    </code></pre><p>These steps will also install <a href="http://gruntjs.com/">Grunt</a>. Our project comes with preconfigured grunt tasks, so you can run:</p><pre><code>grunt build\n    </code></pre><p>To start the application, run:</p><pre><code>grunt serve\n    </code></pre><p>The application should now be reachable under <a href=http://localhost:9000>http://localhost:9000</a>.</p></div></div><footer></footer>'),a.put("app/installation/installation-core.html",'<navbar></navbar><div class="container content"><h1>Probr-Core: Installation</h1><div class=row><div class="col-xs-6 install-block"><a ng-click="installation = \'docker\'"><i class="icon-install icon-docker" ng-class="{ \'icon-active\': installation === \'docker\' }"></i></a></div><div class="col-xs-6 install-block" ng-click="installation == \'python\'"><a ng-click="installation = \'python\'"><i class="icon-install icon-python" ng-class="{ \'icon-active\': installation === \'python\' }"></i></a></div></div><div class=row ng-show="installation ===\'docker\'"><h2>Requirements</h2><ul><li><a href="http://docker.com/" target=_blank>Docker</a></li><li><a href="https://docs.docker.com/compose/" target=_blank>Docker-Compose</a></li></ul><h2>Installation</h2><p>Clone probr-core and head into its directory. Now let docker-compose start your probr-core instance:</p><pre><code>docker-compose up -d</code></pre><p>This will setup a functioning probr-core installation, as well as MongoDB and InfluxDB and its corresponding handlers.</p><p>In order to have a login for probr-core, you have to set-up a superuser for the application:</p><pre><code>docker exec -ti probrcore_web_1 python manage.py createsuperuser</code></pre><p>Now you can log in to the probr-core web application and manage your devices or start sniffing.</p></div><div class=row ng-show="installation ===\'python\'"><p>The frameworks, languages, tools and technologies used and required in the probr-core project are:</p><ul><li>Python 2.7</li><li><a href="https://www.djangoproject.com/">Django</a></li><li><a href="http://bower.io/">Bower</a></li><li><a href=https://pip.pypa.io/en/latest/installing.html>PIP</a></li></ul><h3><a id=user-content-devices class=anchor href=#devices aria-hidden=true><span class="octicon octicon-link"></span></a>Devices</h3><p>The devices used for sniffing WiFi packets must fulfill the following requirements:</p><ul><li>*NIX operating system or simliar (Debian, Ubuntu, OpenWRT, Mac OS X, Raspbian etc.)</li><li>wget installed</li><li>tcpdump installed</li><li>internet access</li><li>wireless interface with monitor mode capabilities</li></ul><h2><a id=user-content-installation class=anchor href=#installation aria-hidden=true><span class="octicon octicon-link"></span></a>Installation</h2><p>We highly recommended to use <a href="https://virtualenv.pypa.io/en/latest/">Virtualenv</a> to manage the python environment for probr-core.</p><p>After cloning the project, create a virtual environment for probr outside the probr-core directory:</p><pre><code>virtualenv .env_probr</code></pre><p>Activate the virtual python environment:</p><pre><code>source .env_probr/bin/activate</code></pre><p>Go into the<pre><code>probr-core</code></pre>directory.Now install the python dependencies of the project:</p><pre><code>pip install -r requirements.txt</code></pre><p>Now, install the frontend and web dependencies using bower:</p><pre><code>bower install</code></pre><p>You\'re pretty much set to start probr-core at this moment. What is left to do is:</p><p>Create the DB tables:</p><pre><code>python manage.py migrate</code></pre><p>Create an admin user for the Django webproject:</p><pre><code>python manage.py createsuperuser</code></pre><p>Make sure the mongodb deamon is running:</p><pre><code>mongod &amp; </code></pre><p>Also, the redis-server must be running before you can use probr-core</p><pre><code>redis-server &amp;</code></pre><h2><a id=user-content-start-up class=anchor href=#start-up aria-hidden=true><span class="octicon octicon-link"></span></a>Start-up</h2><p>Finally, you\'re ready to start your probr-core server by running:</p><pre><code>python manage.py runserver</code></pre><p>In order for the data to be processed and entered into the database, you need to start the celery worker:</p><pre><code>celery worker -A probr</code></pre><p>And you can check it out by visiting<pre><code>http://localhost:8000</code></pre>.</p></div></div><footer></footer>'),a.put("app/installation/installation.html",'<navbar></navbar><div class="container content"><h1>Getting Started</h1><div class=row><a ui-sref=installation-core><div class="col-xs-6 install-block"><i class="icon-install fa fa-cogs"></i> <span>Core</span></div></a> <a ui-sref=installation-analysis><div class="col-xs-6 install-block"><i class="icon-install fa fa-flask"></i> <span>Analysis</span></div></a></div></div><footer></footer>'),a.put("app/overview/overview.html",'<navbar></navbar><div class=particles-bg id=particles particles><header class=hero-unit id=banner><div class=container><img src=assets/images/probrlogo_white.bf46dc4b.png><h4 class="lead centered">a generic wifi tracking system</h4></div></header></div><div class="container content" id=whatisprobr><h1>Welcome!</h1><p>Probr is a generic and distributed wifi-tracking system, built and developed over the course of a masters project at the University of Zurich. It\'s aim is to make it easier to conduct research-project in the domain of wireless sniffing, tracking and analysis. The project is split into two completely independent parts.</p><h2>Core</h2><p><a ui-sref=docs-core>probr-core</a> is a python-django based system for remote device administration. It allows to setup basic *NIX devices to use for various tasks, including but not limited to sniffing</p><h2>Analysis</h2><p><a ui-sref=docs-analysis>probr-analysis</a> is a NodeJS based frontend that visualizes core concepts of our analysis of collected probe requests. It allows to track individual devices using their MAC-Address, as well as monitor room utilization using an custom-made algorithm.</p><h2>Get Started</h2><p>To try out probr for yourself, simply follow our <a ui-sref=get-started>Get Started</a> guide.</p><h1>How It Works</h1><p>Probr uses a distributed architecture. The central component called probr-core serves as a management and storage server. First, all sniffing devices register themselves on the server and can be remotely managed. They are able to relay their sniffing-results (or result of any other given task) to the server which will process the received payload through a flexible handler-system.</p><p>The system is currently able to process *.pcap files and to store its contents into a database of your choice. New database adapters can also be written easily and registered in probr-core.</p><h2>Advantages</h2><p>Using probr-core gives you a headstart when building your own sniffing architecture. Data collection is therefore easy, and faulty devices can be remotely administrated. This allows you to concentrate on your actual research project instead of rebuilding the same system for different use cases over and over again.</p><p>probr-core can be used for the following purposes:</p><ul><li>Out-of-the-box WiFi sniffing and monitoring</li><li>Included templates to sniff on a wide range of devices, given tcpdump is installed</li><li>No knowledge about WiFi protocols required</li><li>Free to use and completely open-source</li><li>Supports a range of different databases for storage, such as MongoDB or InfluxDB</li></ul></div><footer></footer>'),a.put("app/usage/usage-analysis.html",'<navbar></navbar><div class="container content"><h1>Probr-Analysis: Usage Examples</h1><div class=row></div></div><footer></footer>'),a.put("app/usage/usage-core.html",'<navbar></navbar><div class="container content"><h1>Probr-Core: Usage Examples</h1><div class=row><h2>Adding a new device</h2>The gif below shows how you can use the device wizard to add a sniffing device. The terminal on the right is a ssh connection to the device which shall be set up.<br><br><img src=assets/images/gifs/add_device_wizard.871a3050.gif alt="Adding a device." class=usage-gif width=800 height="400"></div><div class=row><h2>Uploading a pcap from a different source:</h2><br><br><img src=assets/images/gifs/upload_pcap.09aeb29d.gif alt="Uploading a pcap by hand." class=usage-gif width=800 height="400"></div></div><footer></footer>'),a.put("app/usage/usage.html",'<navbar></navbar><div class="container content"><h1>Getting Started</h1><div class=row><a ui-sref=installation-core><div class="col-xs-6 install-block"><i class="icon-install fa fa-cogs"></i> <span>Core</span></div></a> <a ui-sref=installation-analysis><div class="col-xs-6 install-block"><i class="icon-install fa fa-flask"></i> <span>Analysis</span></div></a></div></div><footer></footer>'),a.put("app/usecase/usecase.html",'<navbar></navbar><div class="container content" id=whatisprobr><h1>Use-Cases</h1><h2>#1 - Room Utilization</h2><p>Our focus during the development of probr was to answer the following research question:</p><blockquote>Is it possible to determine room utilization, which means to determine the number of people in a room, using only passive wifi tracking?</blockquote><p>Also, we tried to enhance the capabilities of the system by building it in such a generic way that more possible use-cases and questions of interested can be answered. The developed tools, probr-core and probr-analysis aim to not only answer the original research question but to answer more questions along the way. We have tested the system over a longer period of time, but would like to share the results of a 2-day test during an internal conference at the University of Zurich. The probr-system had been deployed during the conference and been used to collect data throughout the 2 days.</p></div><footer></footer>'),a.put("components/footer/footer.html","<div class=container><div class=row><div class=col-xs-4><img src=assets/images/uzh_logo.97f149bf.png></div><div class=col-xs-4><p>probr | Communication Systems Group at the University of Zurich, Switzerland</p></div><div class=col-xs-4><img src=assets/images/csg_logo.ffc2e4f2.png></div></div></div>"),a.put("components/modal/modal.html",'<div class=modal-header><button ng-if=modal.dismissable type=button ng-click=$dismiss() class=close>&times;</button><h4 ng-if=modal.title ng-bind=modal.title class=modal-title></h4></div><div class=modal-body><p ng-if=modal.text ng-bind=modal.text></p><div ng-if=modal.html ng-bind-html=modal.html></div></div><div class=modal-footer><button ng-repeat="button in modal.buttons" ng-class=button.classes ng-click=button.click($event) ng-bind=button.text class=btn></button></div>'),
a.put("components/navbar/navbar.html",'<div class="navbar navbar-inverse navbar-static-top" role=navigation ng-controller=NavbarCtrl><div class=container><div class=navbar-header><button class=navbar-toggle type=button ng-click="isCollapsed = !isCollapsed"><span class=sr-only>Toggle navigation</span> <span class=icon-bar></span> <span class=icon-bar></span> <span class=icon-bar></span></button> <a ui-sref=overview class=navbar-brand>probr</a></div><div collapse=isCollapsed class="navbar-collapse collapse" id=navbar-main><ul class="nav navbar-nav navbar-right"><li ng-class="{active: isActiveRoot(item.link)}" ng-repeat="item in menu" ng-attr-dropdown=isArray(item.link)><a ng-if=!isArray(item.link) ui-sref="{{ item.link }}">{{ item.title }}</a> <a ng-if=isArray(item.link) href=# dropdown-toggle>{{ item.title }}<b class=caret></b></a><ul ng-if=isArray(item.link) class=dropdown-menu><li ng-repeat="entry in item.link"><a ui-sref="{{ entry.link }}">{{ entry.name }}</a></li></ul></li><li ng-repeat-end><a href=http://github.com/probr><i class="fa fa-github"></i> Github</a></li></ul></div></div></div>')}]);